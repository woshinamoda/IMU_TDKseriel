<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Dec 14 09:57:18 2022
<BR><P>
<H3>Maximum Stack Usage =        512 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI9_5_IRQHandler &rArr; fifo_handler &rArr; inv_mems_fifo_swmirror &rArr; dmp_get_fifo_all &rArr; dmp_read_fifo &rArr; dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[51]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI9_5_IRQHandler</a> from inv_mems_drv_hook.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4d]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[54]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1d6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1d7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1d8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1d9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[79]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1db]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[57]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5b]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[5d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1dc]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[66]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1df]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[61]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1f2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1f3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1f4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1f5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1f6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1f7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1f8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[53]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1f9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[63]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[65]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1fa]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[67]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ICM_20948_Init &rArr; self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1fb]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[92]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))

<P><STRONG><a name="[21]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1fd]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1fe]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_lasr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_qfix_mult
</UL>

<P><STRONG><a name="[1ff]"></a>_ll_sshift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[6e]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[70]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[73]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[74]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[72]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[58]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5c]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[5a]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[200]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[186]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
</UL>

<P><STRONG><a name="[7a]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[201]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[7d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[205]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[208]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[7f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[81]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[20d]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[71]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[8e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[20e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7c]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[211]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[212]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[89]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[83]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[214]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[215]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[69]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b7]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[84]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[93]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[95]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[96]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[85]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mems_drv_hook.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; fifo_handler &rArr; inv_mems_fifo_swmirror &rArr; dmp_get_fifo_all &rArr; dmp_read_fifo &rArr; dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_data_ready_cb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_Config</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gpio.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[ba]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>ICM20948_Get_Data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, icm20948.o(i.ICM20948_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ICM20948_Get_Data &rArr; ICM20948_Get_Temperature &rArr; inv_serial_interface_read_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Temperature
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>ICM20948_Get_Temperature</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, icm20948.o(i.ICM20948_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM20948_Get_Temperature &rArr; inv_serial_interface_read_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Data
</UL>

<P><STRONG><a name="[aa]"></a>ICM_20948_Init</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, icm20948.o(i.ICM_20948_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ICM_20948_Init &rArr; self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[1ac]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[9f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[c6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b8]"></a>SPI2_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
</UL>

<P><STRONG><a name="[bc]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[be]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[c0]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[bf]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[bb]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b6]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c3]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c5]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c4]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1b1]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[c7]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[ca]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[cc]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[cd]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[cf]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[d0]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[d2]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[d3]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[d4]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[78]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6d]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d9]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[dd]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[de]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[df]"></a>atan2_q15</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, ml_math_func.o(i.atan2_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = atan2_q15 &rArr; reciprocal_fun_q15 &rArr; inverse_sqrt_q15 &rArr; inv_q15_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocal_fun_q15
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q15_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
</UL>

<P><STRONG><a name="[e4]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[e7]"></a>delay_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
</UL>

<P><STRONG><a name="[e9]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_100us
</UL>

<P><STRONG><a name="[12c]"></a>dmp_get_6quaternion</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_6quaternion))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[133]"></a>dmp_get_9quaternion</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_9quaternion))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[120]"></a>dmp_get_accel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_accel))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[139]"></a>dmp_get_bac_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_bac_state))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[13a]"></a>dmp_get_bac_ts</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_bac_ts))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[129]"></a>dmp_get_calibrated_compass</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_calibrated_compass))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[eb]"></a>dmp_get_fifo_length</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_fifo_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[13b]"></a>dmp_get_flip_pickup_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_flip_pickup_state))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[136]"></a>dmp_get_gmrvquaternion</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_gmrvquaternion))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[126]"></a>dmp_get_gyro_bias</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_gyro_bias))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[ee]"></a>dmp_get_pedometer_get_all_steps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_get_pedometer_get_all_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmp_get_pedometer_get_all_steps &rArr; dmp_get_pedometer_num_of_steps_20648 &rArr; inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[f0]"></a>dmp_get_pedometer_num_of_steps</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.dmp_get_pedometer_num_of_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dmp_get_pedometer_num_of_steps &rArr; dmp_get_pedometer_get_all_steps &rArr; dmp_get_pedometer_num_of_steps_20648 &rArr; inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_get_all_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[ef]"></a>dmp_get_pedometer_num_of_steps_20648</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_get_pedometer_num_of_steps_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmp_get_pedometer_num_of_steps_20648 &rArr; inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_read_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_get_all_steps
</UL>

<P><STRONG><a name="[12b]"></a>dmp_get_raw_compass</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_raw_compass))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[124]"></a>dmp_get_raw_gyro</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_raw_gyro))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[ec]"></a>dmp_read_fifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmp_read_fifo &rArr; dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[f2]"></a>dmp_reset_control_registers</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_reset_control_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_reset_control_registers &rArr; dmp_reset_control_registers_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_control_registers_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[f3]"></a>dmp_reset_control_registers_20648</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_reset_control_registers_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_reset_control_registers_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_control_registers
</UL>

<P><STRONG><a name="[b2]"></a>dmp_reset_fifo</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.dmp_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_FIFO_RST_Diamond
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[f7]"></a>dmp_reset_odr_counters</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_reset_odr_counters))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_reset_odr_counters &rArr; dmp_reset_odr_counters_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_odr_counters_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
</UL>

<P><STRONG><a name="[f8]"></a>dmp_reset_odr_counters_20648</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_reset_odr_counters_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_reset_odr_counters_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_odr_counters
</UL>

<P><STRONG><a name="[165]"></a>dmp_reset_pickup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_reset_pickup))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[f9]"></a>dmp_set_FIFO_watermark</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_FIFO_watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_FIFO_watermark &rArr; dmp_set_FIFO_watermark_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[fa]"></a>dmp_set_FIFO_watermark_20648</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_FIFO_watermark_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_FIFO_watermark_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark
</UL>

<P><STRONG><a name="[fc]"></a>dmp_set_accel_cal_params</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_cal_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_accel_cal_params &rArr; dmp_set_accel_cal_params_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_cal_params
</UL>

<P><STRONG><a name="[fd]"></a>dmp_set_accel_cal_params_20648</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_accel_cal_params_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_accel_cal_params_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params
</UL>

<P><STRONG><a name="[ff]"></a>dmp_set_accel_feedback_gain</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_feedback_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_accel_feedback_gain &rArr; dmp_set_accel_feedback_gain_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_quaternion_gain
</UL>

<P><STRONG><a name="[100]"></a>dmp_set_accel_feedback_gain_20648</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_accel_feedback_gain_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_accel_feedback_gain_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain
</UL>

<P><STRONG><a name="[101]"></a>dmp_set_accel_fsr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_accel_fsr &rArr; dmp_set_accel_fsr_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
</UL>

<P><STRONG><a name="[102]"></a>dmp_set_accel_fsr_20648</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_accel_fsr_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_accel_fsr_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr
</UL>

<P><STRONG><a name="[103]"></a>dmp_set_accel_scale2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_scale2))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_accel_scale2 &rArr; dmp_set_accel_scale2_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
</UL>

<P><STRONG><a name="[104]"></a>dmp_set_accel_scale2_20648</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_accel_scale2_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_accel_scale2_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2
</UL>

<P><STRONG><a name="[105]"></a>dmp_set_bac_rate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.dmp_set_bac_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmp_set_bac_rate &rArr; dmp_set_bac_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[106]"></a>dmp_set_bac_rate_20648</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_bac_rate_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_bac_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate
</UL>

<P><STRONG><a name="[b1]"></a>dmp_set_bias</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_bias &rArr; dmp_set_bias_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
</UL>

<P><STRONG><a name="[107]"></a>dmp_set_bias_20648</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_bias_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_bias_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias
</UL>

<P><STRONG><a name="[108]"></a>dmp_set_compass_matrix</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_compass_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_compass_matrix &rArr; dmp_set_compass_matrix_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_dmp_cal
</UL>

<P><STRONG><a name="[109]"></a>dmp_set_compass_matrix_20648</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_compass_matrix_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_compass_matrix_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix
</UL>

<P><STRONG><a name="[10a]"></a>dmp_set_data_interrupt_control</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_interrupt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_data_interrupt_control &rArr; dmp_set_data_interrupt_control_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[10b]"></a>dmp_set_data_interrupt_control_20648</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_data_interrupt_control_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_data_interrupt_control_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control
</UL>

<P><STRONG><a name="[10c]"></a>dmp_set_data_output_control1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_output_control1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_data_output_control1 &rArr; dmp_set_data_output_control1_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control1_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[10d]"></a>dmp_set_data_output_control1_20648</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_set_data_output_control1_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_set_data_output_control1_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control1
</UL>

<P><STRONG><a name="[10e]"></a>dmp_set_data_output_control2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_output_control2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_data_output_control2 &rArr; dmp_set_data_output_control2_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control2_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[10f]"></a>dmp_set_data_output_control2_20648</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_set_data_output_control2_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_set_data_output_control2_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control2
</UL>

<P><STRONG><a name="[110]"></a>dmp_set_data_rdy_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_rdy_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_data_rdy_status &rArr; dmp_set_data_rdy_status_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[111]"></a>dmp_set_data_rdy_status_20648</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_data_rdy_status_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_data_rdy_status_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status
</UL>

<P><STRONG><a name="[112]"></a>dmp_set_gyro_sf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_gyro_sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_gyro_sf &rArr; dmp_set_gyro_sf_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
</UL>

<P><STRONG><a name="[113]"></a>dmp_set_gyro_sf_20648</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_gyro_sf_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_gyro_sf_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf
</UL>

<P><STRONG><a name="[114]"></a>dmp_set_motion_event_control</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.dmp_set_motion_event_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_set_motion_event_control &rArr; dmp_set_motion_event_control_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_motion_event_control_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[115]"></a>dmp_set_motion_event_control_20648</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_set_motion_event_control_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_set_motion_event_control_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_motion_event_control
</UL>

<P><STRONG><a name="[99]"></a>dmp_set_sensor_rate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.dmp_set_sensor_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmp_set_sensor_rate &rArr; dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DividerRateSet
</UL>

<P><STRONG><a name="[116]"></a>dmp_set_sensor_rate_20648</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, dmp3default_20648.o(i.dmp_set_sensor_rate_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate
</UL>

<P><STRONG><a name="[156]"></a>dmp_set_tilt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_tilt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_tilt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_activity_classifier
</UL>

<P><STRONG><a name="[9b]"></a>fifo_handler</STRONG> (Thumb, 1660 bytes, Stack size 256 bytes, icm20948.o(i.fifo_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = fifo_handler &rArr; inv_mems_fifo_swmirror &rArr; dmp_get_fifo_all &rArr; dmp_read_fifo &rArr; dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_swmirror
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_dmp_get_calibrated_gyro
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_linearacceleration
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_gravity
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_identify_interrupt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_tick_count
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_rv_accuracy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_mag_accuracy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_fullscale
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_accuracy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gmrv_accuracy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_fullscale
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_accuracy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_raw_gyro
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_raw_compass
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_gyro_bias
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_gmrvquaternion
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_flip_pickup_state
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_calibrated_compass
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_bac_ts
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_bac_state
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_accel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_9quaternion
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_6quaternion
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q16_to_float
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>get_highest_bit_position</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, ml_math_func.o(i.get_highest_bit_position))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_limits_and_scale
</UL>

<P><STRONG><a name="[177]"></a>get_tick_count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.get_tick_count))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_tick_count
</UL>

<P><STRONG><a name="[9c]"></a>gyro_data_ready_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948.o(i.gyro_data_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>inv_androidSensor_enabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.inv_androidSensor_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_activity_classifier
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyCompass
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_update_odr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_set_odr
</UL>

<P><STRONG><a name="[149]"></a>inv_apply_raw_compass_matrix</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, inv_mems_slave_compass.o(i.inv_apply_raw_compass_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_apply_raw_compass_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[140]"></a>inv_compass_dmp_cal</STRONG> (Thumb, 400 bytes, Stack size 128 bytes, inv_mems_slave_compass.o(i.inv_compass_dmp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = inv_compass_dmp_cal &rArr; dmp_set_compass_matrix &rArr; dmp_set_compass_matrix_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[137]"></a>inv_compute_scalar_part</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ml_math_func.o(i.inv_compute_scalar_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_gravity
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[123]"></a>inv_convert_dmp3_to_body</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, inv_mems_data_converter.o(i.inv_convert_dmp3_to_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_convert_dmp3_to_body &rArr; inv_q_rotate &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[12d]"></a>inv_convert_rotation_vector</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, inv_mems_data_converter.o(i.inv_convert_rotation_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = inv_convert_rotation_vector &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult_q_qi
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[12e]"></a>inv_convert_rotation_vector_1</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, inv_mems_data_converter.o(i.inv_convert_rotation_vector_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = inv_convert_rotation_vector_1 &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult_q_qi
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[148]"></a>inv_decode_3_16bit_elements</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_decode_3_16bit_elements))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[14a]"></a>inv_decode_3_32bit_elements</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_decode_3_32bit_elements))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[147]"></a>inv_decode_one_ivory_fifo_packet</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.inv_decode_one_ivory_fifo_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_decode_one_ivory_fifo_packet &rArr; inv_apply_raw_compass_matrix
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_3_16bit_elements
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_raw_compass_matrix
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_3_32bit_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
</UL>

<P><STRONG><a name="[fb]"></a>inv_dmpdriver_int16_to_big8</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_int16_to_big8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_dmpdriver_int16_to_big8
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate_20648
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status_20648
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control_20648
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate_20648
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params_20648
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark_20648
</UL>

<P><STRONG><a name="[fe]"></a>inv_dmpdriver_int32_to_big8</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_int32_to_big8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_dmpdriver_int32_to_big8
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf_20648
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix_20648
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias_20648
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate_20648
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2_20648
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr_20648
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain_20648
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params_20648
</UL>

<P><STRONG><a name="[14d]"></a>inv_dmpdriver_mems_firmware_load</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_mems_firmware_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_dmpdriver_mems_firmware_load &rArr; inv_mems_firmware_load &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_load_firmware_20648
</UL>

<P><STRONG><a name="[f1]"></a>inv_dmpdriver_read_mems</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_read_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps_20648
</UL>

<P><STRONG><a name="[f4]"></a>inv_dmpdriver_write_mems</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_write_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate_20648
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_motion_event_control_20648
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf_20648
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status_20648
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control2_20648
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control1_20648
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control_20648
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix_20648
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias_20648
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate_20648
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2_20648
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr_20648
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain_20648
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params_20648
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark_20648
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_odr_counters_20648
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_control_registers_20648
</UL>

<P><STRONG><a name="[155]"></a>inv_enable_activity_classifier</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.inv_enable_activity_classifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_enable_activity_classifier
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tilt_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[157]"></a>inv_enable_mems_hw_sensors</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_enable_mems_hw_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = inv_enable_mems_hw_sensors &rArr; inv_mems_pressure_resume_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[b3]"></a>inv_enable_sensor</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, inv_mems_base_control.o(i.inv_enable_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = inv_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; DividerRateSet &rArr; dmp_set_sensor_rate &rArr; dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_prevent_lpen_control
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_pressure_availability
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_compass_availability
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_pressure
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_compass
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[166]"></a>inv_enable_tilt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.inv_enable_tilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_enable_tilt
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tilt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[16d]"></a>inv_execute_read_secondary</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, inv_mems_secondary_transport.o(i.inv_execute_read_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
</UL>

<P><STRONG><a name="[172]"></a>inv_execute_write_secondary</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, inv_mems_secondary_transport.o(i.inv_execute_write_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[142]"></a>inv_fast_sqrt</STRONG> (Thumb, 216 bytes, Stack size 44 bytes, ml_math_func.o(i.inv_fast_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_limits_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
</UL>

<P><STRONG><a name="[121]"></a>inv_get_accel_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_accel_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[1a4]"></a>inv_get_accel_divider</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_accel_divider))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[122]"></a>inv_get_accel_fullscale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_accel_fullscale))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[e3]"></a>inv_get_batch_mode_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.inv_get_batch_mode_status))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>

<P><STRONG><a name="[193]"></a>inv_get_chip_power_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_chip_power_state))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>

<P><STRONG><a name="[175]"></a>inv_get_dmp_start_address</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.inv_get_dmp_start_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_get_dmp_start_address
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_dmp_start_address_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
</UL>

<P><STRONG><a name="[176]"></a>inv_get_dmp_start_address_20648</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dmp3default_20648.o(i.inv_get_dmp_start_address_20648))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_dmp_start_address
</UL>

<P><STRONG><a name="[138]"></a>inv_get_gmrv_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_gmrv_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[128]"></a>inv_get_gyro_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_gyro_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[169]"></a>inv_get_gyro_divider</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_gyro_divider))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[125]"></a>inv_get_gyro_fullscale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_gyro_fullscale))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[12a]"></a>inv_get_mag_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_mag_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[134]"></a>inv_get_rv_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_rv_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[11c]"></a>inv_get_tick_count</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, inv_mems_drv_hook.o(i.inv_get_tick_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_get_tick_count
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[11b]"></a>inv_identify_interrupt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.inv_identify_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_identify_interrupt &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[178]"></a>inv_init_secondary</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, inv_mems_secondary_transport.o(i.inv_init_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_init_secondary &rArr; inv_mems_secondary_stop_channel &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[ae]"></a>inv_initialize_lower_driver</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_initialize_lower_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = inv_initialize_lower_driver &rArr; inv_load_firmware &rArr; inv_load_firmware_20648 &rArr; inv_dmpdriver_mems_firmware_load &rArr; inv_mems_firmware_load &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_load_firmware
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_control_registers
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_fullscale
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_divider
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_divider
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[14b]"></a>inv_int16_to_big8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_int16_to_big8))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[14c]"></a>inv_int32_to_big8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_int32_to_big8))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[17a]"></a>inv_load_firmware</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_interface_mapping.o(i.inv_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inv_load_firmware &rArr; inv_load_firmware_20648 &rArr; inv_dmpdriver_mems_firmware_load &rArr; inv_mems_firmware_load &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_load_firmware_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[181]"></a>inv_load_firmware_20648</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dmp3default_20648.o(i.inv_load_firmware_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_load_firmware_20648 &rArr; inv_dmpdriver_mems_firmware_load &rArr; inv_mems_firmware_load &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_mems_firmware_load
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_load_firmware
</UL>

<P><STRONG><a name="[164]"></a>inv_mems_allow_lpen_control</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, inv_mems_base_driver.o(i.inv_mems_allow_lpen_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_mems_allow_lpen_control &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[12f]"></a>inv_mems_augmented_sensors_get_gravity</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_get_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = inv_mems_augmented_sensors_get_gravity &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_qfix_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[132]"></a>inv_mems_augmented_sensors_get_linearacceleration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_get_linearacceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_mems_augmented_sensors_get_linearacceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[135]"></a>inv_mems_augmented_sensors_get_orientation</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_get_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = inv_mems_augmented_sensors_get_orientation &rArr; atan2_q15 &rArr; reciprocal_fun_q15 &rArr; inverse_sqrt_q15 &rArr; inv_q15_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_transpose_quaternion_to_rotation
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_qfix_mult
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[184]"></a>inv_mems_augmented_sensors_set_odr</STRONG> (Thumb, 814 bytes, Stack size 16 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_mems_augmented_sensors_set_odr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
</UL>

<P><STRONG><a name="[167]"></a>inv_mems_augmented_sensors_update_odr</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_update_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_mems_augmented_sensors_update_odr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[187]"></a>inv_mems_compass_getstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_slave_compass.o(i.inv_mems_compass_getstate))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[127]"></a>inv_mems_dmp_get_calibrated_gyro</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inv_mems_mpu_fifo_control.o(i.inv_mems_dmp_get_calibrated_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_mems_dmp_get_calibrated_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[11f]"></a>inv_mems_fifo_pop</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.inv_mems_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_mems_fifo_pop &rArr; inv_decode_one_ivory_fifo_packet &rArr; inv_apply_raw_compass_matrix
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packet_size_and_samplecnt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[11d]"></a>inv_mems_fifo_swmirror</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.inv_mems_fifo_swmirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_mems_fifo_swmirror &rArr; dmp_get_fifo_all &rArr; dmp_read_fifo &rArr; dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[14e]"></a>inv_mems_firmware_load</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, inv_mems_load_firmware.o(i.inv_mems_firmware_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = inv_mems_firmware_load &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_mems_firmware_load
</UL>

<P><STRONG><a name="[15e]"></a>inv_mems_get_compass_availability</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_get_compass_availability))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[160]"></a>inv_mems_get_pressure_availability</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_get_pressure_availability))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[1a9]"></a>inv_mems_pressure_getstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_slave_pressure.o(i.inv_mems_pressure_getstate))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
</UL>

<P><STRONG><a name="[15b]"></a>inv_mems_pressure_resume_bmp</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, inv_mems_slave_pressure.o(i.inv_mems_pressure_resume_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_mems_pressure_resume_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_compass_getstate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_saveI2cOdr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_restoreI2cOdr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[15c]"></a>inv_mems_pressure_suspend_bmp</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, inv_mems_slave_pressure.o(i.inv_mems_pressure_suspend_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_mems_pressure_suspend_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_compass_getstate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[161]"></a>inv_mems_prevent_lpen_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_prevent_lpen_control))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[18a]"></a>inv_mems_run_selftest</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, inv_mems_mpu_selftest.o(i.inv_mems_run_selftest))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_accelgyro_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
</UL>

<P><STRONG><a name="[170]"></a>inv_mems_secondary_disable_i2c</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_disable_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_mems_secondary_disable_i2c &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[16f]"></a>inv_mems_secondary_enable_i2c</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_enable_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_mems_secondary_enable_i2c &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[189]"></a>inv_mems_secondary_restoreI2cOdr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_restoreI2cOdr))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[188]"></a>inv_mems_secondary_saveI2cOdr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_saveI2cOdr))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[18e]"></a>inv_mems_secondary_set_odr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_mems_secondary_set_odr &rArr; inv_set_secondary_divider &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[171]"></a>inv_mems_secondary_stop_channel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_stop_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_mems_secondary_stop_channel &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_secondary
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[e1]"></a>inv_q15_mult</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, ml_math_func.o(i.inv_q15_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_q15_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_q15
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocal_fun_q15
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_sqrt_q15
</UL>

<P><STRONG><a name="[1aa]"></a>inv_q29_mult</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q29_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_transpose_quaternion_to_rotation
</UL>

<P><STRONG><a name="[141]"></a>inv_q30_mult</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q30_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult_q_qi
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_dmp_cal
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
</UL>

<P><STRONG><a name="[191]"></a>inv_q_invert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_invert))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
</UL>

<P><STRONG><a name="[190]"></a>inv_q_mult</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
</UL>

<P><STRONG><a name="[145]"></a>inv_q_rotate</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, ml_math_func.o(i.inv_q_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_q_rotate &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
</UL>

<P><STRONG><a name="[182]"></a>inv_qfix_mult</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, ml_math_func.o(i.inv_qfix_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_qfix_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_gravity
</UL>

<P><STRONG><a name="[144]"></a>inv_reGenerate_sensorControl</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, inv_mems_base_control.o(i.inv_reGenerate_sensorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_reGenerate_sensorControl
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_androidSensor_to_control
</UL>

<P><STRONG><a name="[14f]"></a>inv_read_mems</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, inv_mems_transport.o(i.inv_read_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_read_mems
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[ed]"></a>inv_read_mems_reg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, inv_mems_transport.o(i.inv_read_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_identify_interrupt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_accel_fullscale
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_FIFO_RST_Diamond
</UL>

<P><STRONG><a name="[195]"></a>inv_read_mems_reg_core</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, inv_mems_transport.o(i.inv_read_mems_reg_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_save_setting
</UL>

<P><STRONG><a name="[16e]"></a>inv_read_secondary</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, inv_mems_secondary_transport.o(i.inv_read_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[b4]"></a>inv_reset_dmp_odr_counters</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_reset_dmp_odr_counters))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_reset_dmp_odr_counters &rArr; dmp_reset_odr_counters &rArr; dmp_reset_odr_counters_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_odr_counters
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
</UL>

<P><STRONG><a name="[159]"></a>inv_resume_akm</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, inv_mems_slave_compass.o(i.inv_resume_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_resume_akm &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[197]"></a>inv_rotation_to_quaternion</STRONG> (Thumb, 846 bytes, Stack size 80 bytes, ml_math_func.o(i.inv_rotation_to_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_rotation_to_quaternion &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[a6]"></a>inv_serial_interface_read_hook</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, inv_mems_drv_hook.o(i.inv_serial_interface_read_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_serial_interface_read_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Temperature
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>

<P><STRONG><a name="[ab]"></a>inv_serial_interface_write_hook</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, inv_mems_drv_hook.o(i.inv_serial_interface_write_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>

<P><STRONG><a name="[19b]"></a>inv_set_accel_cal_params</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, inv_mems_base_control.o(i.inv_set_accel_cal_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_set_accel_cal_params &rArr; dmp_set_accel_cal_params &rArr; dmp_set_accel_cal_params_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[17d]"></a>inv_set_accel_divider</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_accel_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_set_accel_divider &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[17f]"></a>inv_set_accel_fullscale</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_accel_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_set_accel_fullscale &rArr; dmp_set_accel_scale2 &rArr; dmp_set_accel_scale2_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_accel_fullscale
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[19d]"></a>inv_set_accel_quaternion_gain</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, inv_mems_base_control.o(i.inv_set_accel_quaternion_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_set_accel_quaternion_gain &rArr; dmp_set_accel_feedback_gain &rArr; dmp_set_accel_feedback_gain_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[180]"></a>inv_set_chip_power_state</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_chip_power_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_100us
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_lpen_control
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
</UL>

<P><STRONG><a name="[1a1]"></a>inv_set_chip_to_body</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, inv_mems_data_converter.o(i.inv_set_chip_to_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_set_chip_to_body
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[ad]"></a>inv_set_chip_to_body_axis_quaternion</STRONG> (Thumb, 196 bytes, Stack size 128 bytes, inv_mems_data_converter.o(i.inv_set_chip_to_body_axis_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_set_chip_to_body_axis_quaternion &rArr; inv_rotation_to_quaternion &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[17b]"></a>inv_set_dmp_address</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_dmp_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_set_dmp_address &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_dmp_start_address
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
</UL>

<P><STRONG><a name="[16c]"></a>inv_set_dmp_stepcounter_update_offset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_set_dmp_stepcounter_update_offset))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[17c]"></a>inv_set_gyro_divider</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, inv_mems_base_driver.o(i.inv_set_gyro_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_set_gyro_divider &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[17e]"></a>inv_set_gyro_fullscale</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_gyro_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inv_set_gyro_fullscale &rArr; inv_set_gyro_sf &rArr; dmp_set_gyro_sf &rArr; dmp_set_gyro_sf_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[16a]"></a>inv_set_gyro_sf</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, inv_mems_base_driver.o(i.inv_set_gyro_sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_set_gyro_sf &rArr; dmp_set_gyro_sf &rArr; dmp_set_gyro_sf_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_fullscale
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[168]"></a>inv_set_hw_smplrt_dmp_odrs</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, inv_mems_base_control.o(i.inv_set_hw_smplrt_dmp_odrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = inv_set_hw_smplrt_dmp_odrs &rArr; DividerRateSet &rArr; dmp_set_sensor_rate &rArr; dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_divider
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_divider
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_set_odr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_divider
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_quaternion_gain
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_cal_params
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyCompass
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateDividerGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DividerRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[19c]"></a>inv_set_mems_accel_fullscale</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, inv_mems_base_driver.o(i.inv_set_mems_accel_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_set_mems_accel_fullscale &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
</UL>

<P><STRONG><a name="[1a2]"></a>inv_set_mems_gyro_fullscale</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, inv_mems_base_driver.o(i.inv_set_mems_gyro_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_set_mems_gyro_fullscale &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_fullscale
</UL>

<P><STRONG><a name="[1a5]"></a>inv_set_odr</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, inv_mems_base_control.o(i.inv_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = inv_set_odr &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; DividerRateSet &rArr; dmp_set_sensor_rate &rArr; dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_fullscale
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_prevent_lpen_control
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_pressure_availability
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_compass_availability
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_divider
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_pressure
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_compass
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_set_odr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
</UL>

<P><STRONG><a name="[1a6]"></a>inv_set_secondary</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inv_mems_base_driver.o(i.inv_set_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_set_secondary &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[18f]"></a>inv_set_secondary_divider</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, inv_mems_base_driver.o(i.inv_set_secondary_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_set_secondary_divider &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_set_odr
</UL>

<P><STRONG><a name="[af]"></a>inv_set_slave_compass_id</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_slave_compass_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = inv_set_slave_compass_id &rArr; inv_compass_dmp_cal &rArr; dmp_set_compass_matrix &rArr; dmp_set_compass_matrix_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_secondary
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_dmp_cal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desactivate_compass
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activate_compass
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_prevent_lpen_control
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[196]"></a>inv_setup_compass_akm</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, inv_mems_slave_compass.o(i.inv_setup_compass_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
</UL>

<P><STRONG><a name="[154]"></a>inv_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inv_mems_drv_hook.o(i.inv_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inv_sleep &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
</UL>

<P><STRONG><a name="[19e]"></a>inv_sleep_100us</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, inv_mems_drv_hook.o(i.inv_sleep_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_sleep_100us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>

<P><STRONG><a name="[16b]"></a>inv_sleep_mems</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_sleep_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_sleep_mems &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[15a]"></a>inv_suspend_akm</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inv_mems_slave_compass.o(i.inv_suspend_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_suspend_akm &rArr; inv_mems_secondary_stop_channel &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_getstate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[183]"></a>inv_transpose_quaternion_to_rotation</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, ml_math_func.o(i.inv_transpose_quaternion_to_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inv_transpose_quaternion_to_rotation &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
</UL>

<P><STRONG><a name="[162]"></a>inv_wakeup_mems</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_wakeup_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_wakeup_mems &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[150]"></a>inv_write_mems</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, inv_mems_transport.o(i.inv_write_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>

<P><STRONG><a name="[158]"></a>inv_write_mems_reg</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, inv_mems_transport.o(i.inv_write_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_divider
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_divider
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_FIFO_RST_Diamond
</UL>

<P><STRONG><a name="[173]"></a>inv_write_secondary</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, inv_mems_secondary_transport.o(i.inv_write_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
</UL>

<P><STRONG><a name="[f5]"></a>inv_write_single_mems_reg</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, inv_mems_transport.o(i.inv_write_single_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary_divider
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_accel_fullscale
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>

<P><STRONG><a name="[153]"></a>inv_write_single_mems_reg_core</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, inv_mems_transport.o(i.inv_write_single_mems_reg_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
</UL>

<P><STRONG><a name="[1ab]"></a>inverse_sqrt_q15</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, ml_math_func.o(i.inverse_sqrt_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inverse_sqrt_q15 &rArr; inv_q15_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q15_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocal_fun_q15
</UL>

<P><STRONG><a name="[68]"></a>main</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = main &rArr; ICM_20948_Init &rArr; self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f6]"></a>mpu_set_FIFO_RST_Diamond</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.mpu_set_FIFO_RST_Diamond))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mpu_set_FIFO_RST_Diamond &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
</UL>

<P><STRONG><a name="[13c]"></a>process_sensor_output</STRONG> (Thumb, 2784 bytes, Stack size 88 bytes, icm20948.o(i.process_sensor_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = process_sensor_output &rArr; inv_convert_rotation_vector_1 &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_9quaternion
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_6quaternion
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[e0]"></a>reciprocal_fun_q15</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ml_math_func.o(i.reciprocal_fun_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = reciprocal_fun_q15 &rArr; inverse_sqrt_q15 &rArr; inv_q15_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_sqrt_q15
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q15_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_q15
</UL>

<P><STRONG><a name="[b0]"></a>self_test</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, icm20948.o(i.self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[b5]"></a>set_output_rates</STRONG> (Thumb, 926 bytes, Stack size 32 bytes, icm20948.o(i.set_output_rates))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = set_output_rates &rArr; inv_set_odr &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; DividerRateSet &rArr; dmp_set_sensor_rate &rArr; dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[1a0]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[db]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[199]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
</UL>

<P><STRONG><a name="[174]"></a>test_limits_and_scale</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ml_math_func.o(i.test_limits_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_highest_bit_position
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
</UL>

<P><STRONG><a name="[1ad]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[1b8]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1bb]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1be]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1c0]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1c1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ba]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1bd]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1c2]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b2]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1c4]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[1c5]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Temperature
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1c7]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1c9]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[1ce]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Temperature
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q16_to_float
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[1ca]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1cb]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
</UL>

<P><STRONG><a name="[1cc]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Temperature
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q16_to_float
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[216]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[217]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
</UL>

<P><STRONG><a name="[1cd]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1d1]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1cf]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c6]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1b9]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
</UL>

<P><STRONG><a name="[1d0]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[e5]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1d2]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1b3]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1d4]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[56]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1bf]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[cb]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[d1]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[1d5]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c1]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c2]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[130]"></a>inv_q16_to_float</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, icm20948.o(i.inv_q16_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_q16_to_float &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[98]"></a>DividerRateSet</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, inv_mems_base_control.o(i.DividerRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DividerRateSet &rArr; dmp_set_sensor_rate &rArr; dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[b6]"></a>MinDelayGenActual</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, inv_mems_base_control.o(i.MinDelayGenActual))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyCompass
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
</UL>

<P><STRONG><a name="[1a3]"></a>SampleRateDividerGet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.SampleRateDividerGet))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[13d]"></a>getMinDlyAccel</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.getMinDlyAccel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getMinDlyAccel &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[13e]"></a>getMinDlyCompass</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.getMinDlyCompass))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getMinDlyCompass &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[13f]"></a>getMinDlyGyro</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.getMinDlyGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getMinDlyGyro &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[143]"></a>inv_convert_androidSensor_to_control</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, inv_mems_base_control.o(i.inv_convert_androidSensor_to_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_convert_androidSensor_to_control &rArr; inv_reGenerate_sensorControl
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reGenerate_sensorControl
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[163]"></a>inv_enable_sensor_internal</STRONG> (Thumb, 926 bytes, Stack size 40 bytes, inv_mems_base_control.o(i.inv_enable_sensor_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = inv_enable_sensor_internal &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; DividerRateSet &rArr; dmp_set_sensor_rate &rArr; dmp_set_sensor_rate_20648 &rArr; inv_dmpdriver_write_mems &rArr; inv_write_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_stepcounter_update_offset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_motion_event_control
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_pickup
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_get_all_steps
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_fullscale
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_divider
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_tilt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_activity_classifier
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_androidSensor_to_control
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_update_odr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[15d]"></a>sensor_needs_compass</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.sensor_needs_compass))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[15f]"></a>sensor_needs_pressure</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.sensor_needs_pressure))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[1a7]"></a>activate_compass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.activate_compass))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[1a8]"></a>desactivate_compass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.desactivate_compass))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[19f]"></a>inv_mems_get_lpen_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_get_lpen_control))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>

<P><STRONG><a name="[146]"></a>inv_q_mult_q_qi</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, inv_mems_data_converter.o(i.inv_q_mult_q_qi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inv_q_mult_q_qi &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
</UL>

<P><STRONG><a name="[119]"></a>check_fifo_decoded_headers</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, inv_mems_mpu_fifo_control.o(i.check_fifo_decoded_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_fifo_decoded_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
</UL>

<P><STRONG><a name="[ea]"></a>dmp_get_fifo_all</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_fifo_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dmp_get_fifo_all &rArr; dmp_read_fifo &rArr; dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_swmirror
</UL>

<P><STRONG><a name="[117]"></a>extract_sample_cnt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, inv_mems_mpu_fifo_control.o(i.extract_sample_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = extract_sample_cnt &rArr; dmp_reset_fifo &rArr; dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packet_size_and_samplecnt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fifo_decoded_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_swmirror
</UL>

<P><STRONG><a name="[118]"></a>get_packet_size_and_samplecnt</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.get_packet_size_and_samplecnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_packet_size_and_samplecnt
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
</UL>

<P><STRONG><a name="[18c]"></a>inv_check_accelgyro_self_test</STRONG> (Thumb, 140 bytes, Stack size 44 bytes, inv_mems_mpu_selftest.o(i.inv_check_accelgyro_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inv_check_accelgyro_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[151]"></a>inv_do_test_accelgyro</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, inv_mems_mpu_selftest.o(i.inv_do_test_accelgyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inv_do_test_accelgyro &rArr; inv_selftest_read_samples &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[18d]"></a>inv_recover_setting</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, inv_mems_mpu_selftest.o(i.inv_recover_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[19a]"></a>inv_save_setting</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, inv_mems_mpu_selftest.o(i.inv_save_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_save_setting &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
</UL>

<P><STRONG><a name="[152]"></a>inv_selftest_read_samples</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, inv_mems_mpu_selftest.o(i.inv_selftest_read_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_selftest_read_samples &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
</UL>

<P><STRONG><a name="[18b]"></a>inv_setup_selftest</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, inv_mems_mpu_selftest.o(i.inv_setup_selftest))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_setup_selftest &rArr; inv_save_setting &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_save_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[e2]"></a>check_reg_access_lp_disable</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, inv_mems_transport.o(i.check_reg_access_lp_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_reg_access_lp_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_batch_mode_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>

<P><STRONG><a name="[194]"></a>inv_set_bank</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, inv_mems_transport.o(i.inv_set_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>

<P><STRONG><a name="[1c3]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1bc]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1d3]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1c8]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[82]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
